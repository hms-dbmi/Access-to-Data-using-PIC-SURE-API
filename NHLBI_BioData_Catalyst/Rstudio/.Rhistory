# Build query using selected concept paths
vars_of_interest <- c(eclipse_sex_var, eclipse_bmi_var, copdgene_sex_var, copdgene_bmi_var)
combined_query <- picsure::addClause(query = combined_query,
keys = vars_of_interest,
type = "ANYOF")
combined_results <- picsure::runQuery(combined_query)
session <- load("session.RData")
# Build query using selected concept paths
vars_of_interest <- c(eclipse_sex_var, eclipse_bmi_var, copdgene_sex_var, copdgene_bmi_var)
combined_query <- picsure::addClause(query = combined_query,
keys = vars_of_interest,
type = "ANYOF")
combined_results <- picsure::runQuery(combined_query)
head(combined_results)
tail(combined_results)
# rename columns
colnames(combined_results) = c('patient_id', 'parent_accession', 'topmed_accession', 'consent',
'copdgene_sex', 'copdgene_bmi', 'eclipse_bmi', 'eclipse_sex')
# convert consent code to study name
combined_results <- combined_results %>%
mutate(study = ifelse(grepl('phs001252', consent), 'eclipse', 'copdgene'))
head(combined_results)
combined_results <- combined_results %>%
# combine sex variables
mutate(sex = copdgene_sex,
sex = ifelse(sex == '', eclipse_sex, sex),
# combine bmi variables
bmi = copdgene_bmi,
bmi = ifelse(is.na(bmi), eclipse_bmi, bmi))
head(combined_results)
PICSURE_network_URL = "https://picsure.biodatacatalyst.nhlbi.nih.gov/picsure"
token_file <- "token.txt"
token <- scan(token_file, what = "character")
session <- picsure::bdc.initializeSession(PICSURE_network_URL, token)
combined_results
table(combined_results$study)
combined_results %>% filter(study == "copdgene")
# rename columns
colnames(combined_results) = c('patient_id', 'parent_accession', 'topmed_accession', 'consent',
'copdgene_sex', 'copdgene_bmi', 'eclipse_bmi', 'eclipse_sex')
# convert consent code to study name
combined_results <- combined_results %>%
mutate(study = ifelse(grepl('phs001252', consent), 'eclipse', 'copdgene'))
# Build query using selected concept paths
vars_of_interest <- c(eclipse_sex_var, eclipse_bmi_var, copdgene_sex_var, copdgene_bmi_var)
combined_query <- picsure::addClause(query = combined_query,
keys = vars_of_interest,
type = "ANYOF")
combined_results <- picsure::runQuery(combined_query)
head(combined_results)
# rename columns
colnames(combined_results) = c('patient_id', 'parent_accession', 'topmed_accession', 'consent',
'copdgene_sex', 'copdgene_bmi', 'eclipse_bmi', 'eclipse_sex')
# convert consent code to study name
combined_results <- combined_results %>%
mutate(study = ifelse(grepl('phs001252', consent), 'eclipse', 'copdgene'))
head(combined_results)
combined_results <- combined_results %>%
# combine sex variables
mutate(sex = copdgene_sex,
sex = ifelse(sex == '', eclipse_sex, sex),
# combine bmi variables
bmi = copdgene_bmi,
bmi = ifelse(is.na(bmi), eclipse_bmi, bmi))
head(combined_results)
get_mean_from_multiple_values <- function(x) {
y <- as.numeric(mean(as.numeric(unlist(str_split(x, '\\t'))), na.rm = TRUE))
return(y)
}
test <- combined_results %>%
mutate(bmi = lapply(bmi, get_mean_from_multiple_values))
View(test)
get_mean_from_multiple_values <- function(x) {
y <- as.numeric(mean(as.numeric(unlist(str_split(x, '\\t'))), na.rm = TRUE))
return(y)
}
combined_results <- combined_results %>%
mutate(bmi = lapply(bmi, get_mean_from_multiple_values))
# remove unnecessary columns and summarize
plotdf <- combined_results %>%
select(sex, study, bmi) %>%
group_by(sex, study) %>%
summarise(mean = mean(bmi, na.rm = TRUE))
plotdf
View(combined_results)
# remove unnecessary columns and summarize
plotdf <- combined_results %>%
mutate(bmi = as.numeric(bmi)) %>%
select(sex, study, bmi) %>%
group_by(sex, study) %>%
summarise(mean = mean(bmi, na.rm = TRUE))
plotdf
plotdf %>%
ggplot(aes(x = sex, y = mean, fill = study)) +
geom_col(position="dodge") +
theme_bw()
orthopnea_dataframe <- picsure::bdc.searchPicsure(session, 'orthopnea')
session <- load("session.RData")
orthopnea_dataframe <- picsure::bdc.searchPicsure(session, 'orthopnea')
PICSURE_network_URL = "https://picsure.biodatacatalyst.nhlbi.nih.gov/picsure"
token_file <- "token.txt"
token <- scan(token_file, what = "character")
session <- picsure::bdc.initializeSession(PICSURE_network_URL, token)
PICSURE_network_URL = "https://dev.picsure.biodatacatalyst.nhlbi.nih.gov/picsure"
token_file <- "token.txt"
token <- scan(token_file, what = "character")
session <- picsure::bdc.initializeSession(PICSURE_network_URL, token)
session <- picsure::bdc.setResource(session = session,  resourceName = "AUTH")
orthopnea_dataframe <- picsure::bdc.searchPicsure(session, 'orthopnea')
head(orthopnea_dataframe) %>% select(var_name, var_description, values, study_id)
pillows_dataframe <- picsure::bdc.searchPicsure(session, 'pillows')
head(pillows_dataframe) %>% select(var_name, var_description, values, study_id)
harmonized_df <- picsure::bdc.searchPicsure(session, 'orthopnea|pillows')
harmonized_df <- harmonized_df %>%
filter(grepl('phs000007|phs000209|phs000200', study_id))
harmonized_df %>% select(var_name, var_description, values, study_id) %>% head
harmonized_df %>%
filter(grepl('phs000007', study_id),
var_description == 'ORTHOPNEA')
orthopnea_variables_of_interest <- harmonized_df %>%
filter((var_description %in% c('F136 Orthopnea',
'SLEEP ON 2+ PILLOWS TO HELP BREATHING')) |
var_name %in% 'G3A163')
# save variable paths for querying data
orthopnea_variable_paths_of_interest = orthopnea_variables_of_interest$name
orthopnea_variables_of_interest %>% select(var_name, var_description, values, study_id)
# search pic-sure for 'pneumonia'
harmonized_df <- picsure::bdc.searchPicsure(session, "pneumonia")
harmonized_df <- harmonized_df %>%
# filter to variables found in FHS, MESA, WHI
filter(grepl('phs000007|phs000209|phs000200', study_id))
harmonized_df %>% select(var_name, var_description, values, study_id) %>% head()
pneumonia_variables_of_interest = harmonized_df %>%
filter(grepl('phv00021300|phv00087211|phv00283208', var_id))
# save variable paths for querying data
pneumonia_variable_paths_of_interest = pneumonia_variables_of_interest$name
pneumonia_variables_of_interest %>% select(var_name, var_description, values, study_id)
orthopnea_query <- picsure::bdc.newQuery(session)
vars_of_interest <- c(orthopnea_variable_paths_of_interest, pneumonia_variable_paths_of_interest)
orthopnea_query <- picsure::addClause(query = orthopnea_query,
keys = vars_of_interest,
type = "ANYOF")
orthopnea_results <- picsure::runQuery(orthopnea_query)
# rename columns
colnames(orthopnea_results) <- c('patient_id', 'parent_accession', 'topmed_accession', 'consent',
'fhs_orthopnea', 'fhs_pneumonia', 'whi_pneumonia',
'whi_orthopnea', 'mesa_orthopnea', 'mesa_pneumonia')
head(orthopnea_results)
orthopnea_results <- orthopnea_results %>%
# convert consent code to study name
mutate(study = ifelse(grepl('phs000007', consent), 'fhs',
ifelse(grepl('phs000209', consent), 'mesa', 'whi')),
# combine orthopnea variables
orthopnea = ifelse(study == 'fhs', fhs_orthopnea,
ifelse(study == 'mesa', mesa_orthopnea,
ifelse(study == 'whi', whi_orthopnea,
'OTHER'))),
# combine orthopnea variables
pneumonia = ifelse(study == 'fhs', fhs_pneumonia,
ifelse(study == 'mesa', mesa_pneumonia,
ifelse(study == 'whi', whi_pneumonia,
'OTHER'))))
head(orthopnea_results)
print('Orthopnea values: ')
table(orthopnea_results$orthopnea)
print('Pneumonia values: ')
table(orthopnea_results$pneumonia)
mapping_df <- data.frame('raw' = c(unique(orthopnea_results$orthopnea),
unique(orthopnea_results$pneumonia)),
'harmonized' = c('Unknown', 'Yes', 'Yes', 'No', 'No', 'Yes',
'Unknown', 'Yes', 'No', 'Unknown', 'Unknown',
'No', 'Unknown', 'Yes')) %>%
unique()
mapping_df
orthopnea_results <- left_join(orthopnea_results, mapping_df, by = c('orthopnea' = 'raw'))
orthopnea_results$orthopnea <- orthopnea_results$harmonized
orthopnea_results <- left_join(orthopnea_results, mapping_df, by = c('pneumonia' = 'raw'))
orthopnea_results$pneumonia <- orthopnea_results$harmonized.y
table(orthopnea_results$orthopnea)
table(orthopnea_results$pneumonia)
final_df <- orthopnea_results
final_df %>%
filter(study == 'fhs') %>%
select(pneumonia, orthopnea)  %>%
mutate(pneumonia = ifelse(pneumonia == 'Yes', 1, 0),
orthopnea = ifelse(orthopnea == 'Yes', 1, 0)) %>%
as.matrix %>%
vennCounts %>%
vennDiagram(main = 'FHS Dataset')
library(vennDiagram)
BiocManager::install("limma")
library(limma)
final_df %>%
filter(study == 'fhs') %>%
select(pneumonia, orthopnea)  %>%
mutate(pneumonia = ifelse(pneumonia == 'Yes', 1, 0),
orthopnea = ifelse(orthopnea == 'Yes', 1, 0)) %>%
as.matrix %>%
vennCounts %>%
vennDiagram(main = 'FHS Dataset')
final_df %>%
filter(study == 'mesa') %>%
select(pneumonia, orthopnea)  %>%
mutate(pneumonia = ifelse(pneumonia == 'Yes', 1, 0),
orthopnea = ifelse(orthopnea == 'Yes', 1, 0)) %>%
as.matrix %>%
vennCounts %>%
vennDiagram(main = 'MESA Dataset')
final_df %>%
filter(study == 'whi') %>%
select(pneumonia, orthopnea)  %>%
mutate(pneumonia = ifelse(pneumonia == 'Yes', 1, 0),
orthopnea = ifelse(orthopnea == 'Yes', 1, 0)) %>%
as.matrix %>%
vennCounts %>%
vennDiagram(main = 'WHI Dataset')
final_df %>%
select(pneumonia, orthopnea)  %>%
mutate(pneumonia = ifelse(pneumonia == 'Yes', 1, 0),
orthopnea = ifelse(orthopnea == 'Yes', 1, 0)) %>%
as.matrix %>%
vennCounts %>%
vennDiagram(main = 'Combined results across FHS, MESA, and WHI')
save(session, file="session.RData")
session <- load("session.RData")
harmonized_df <- picsure::bdc.searchPicsure(session, 'harmonized', includeValues = TRUE)  %>% filter(study_id == "DCC Harmonized data set")
PICSURE_network_URL = "https://dev.picsure.biodatacatalyst.nhlbi.nih.gov/picsure"
token_file <- "token.txt"
token <- scan(token_file, what = "character")
session <- picsure::bdc.initializeSession(PICSURE_network_URL, token)
session <- picsure::bdc.setResource(session = session,  resourceName = "AUTH")
my_query <- picsure::bdc.newQuery(session) # Initialize a new query
harmonized_df <- picsure::bdc.searchPicsure(session, 'harmonized', includeValues = TRUE)  %>% filter(study_id == "DCC Harmonized data set")
sex_var <- harmonized_df %>% filter(grepl('subject sex', var_description, ignore.case = TRUE))
sex_var
sex_var %>% pull(values)
my_query <- picsure::addClause(query = my_query,
keys = sex_var %>% pull(name),
type = 'FILTER',
categories = list('Female'))
# Search our TOPMed harmonized dataframe for a BMI variable
bmi_var <- harmonized_df %>% filter(grepl('body mass index', var_description, ignore.case = TRUE))
print(paste0(bmi_var$var_name, ': ', bmi_var$name))
# Examine the values
print(paste0('Min: ', bmi_var$min, ', Max: ', bmi_var$max))
# Filter to obese participants with BMI 30 or more
my_query <- picsure::addClause(query = my_query,
keys = bmi_var$name,
type = 'FILTER',
min = 30)
genotype_annotations <- picsure::getGenomicAnnotations(session)
genotype_annotations
# get total list of genes
genes <- genotype_annotations %>% filter(name == 'Gene_with_variant') %>% pull(values)
genes <- strsplit(genes, ', ')[[1]]
# print the first 10 genes
print(genes[1:10])
# check if a certain gene of interest, e.g. FTO, is in the gene list
gene_of_interest <- 'FTO'
gene_of_interest %in% genes
# what values are available for Variant_severity?
genotype_annotations %>% filter(name == "Variant_severity") %>% pull(values)
my_query <- picsure::addClause(query = my_query,
keys = 'Gene_with_variant',
type = 'FILTER',
categories = list('FTO'))
my_query <- picsure::addClause(query = my_query,
keys = 'Variant_severity',
type = 'FILTER',
categories = list("HIGH"))
picsure::runQuery(my_query, resultType = 'Count')
query_result <- picsure::runQuery(my_query)
dim(query_result)
head(query_result)
# Retrieve all COPDGene variables
copd_df <- picsure::bdc.searchPicsure(session, 'phs000179', includeValues = TRUE)
copd_df %>%
filter(grepl('copd', var_description, ignore.case = TRUE)) %>%
select(name, var_name, var_description, values)
copd_path <- '\\phs000179\\pht002239\\phv00159731\\COPD\\'
copd_query <- picsure::bdc.newQuery(session) # Initialize a new query
copd_query <- picsure::addClause(query = copd_query,
keys = copd_path,
type = 'FILTER',
categories = list('Yes'))
copd_query <- picsure::addClause(query = copd_query,
keys = 'Gene_with_variant',
type = 'FILTER',
categories = list('SERPINA1'))
# get all "Variant_consequence_calculated" values
consequences = genotype_annotations %>% filter(name == 'Variant_consequence_calculated') %>% pull(values)
consequences <- strsplit(consequences, ', ')[[1]]
print(consequences)
copd_query <- picsure::addClause(query = copd_query,
keys = 'Variant_consequence_calculated',
type = 'FILTER',
categories = list("missense_variant"))
sample_id_search <- picsure::bdc.searchPicsure(session, 'phs000951', includeValues = FALSE)
#sample_var <- sample_id_search %>% filter()
sample_id_search.head()
head(sample_id_search)
sample_id_search <- picsure::bdc.searchPicsure(session, 'phs000951', includeValues = FALSE)
sample_var <- sample_id_search %>%
filter(var_description == "Sample ID") %>%
pull(name)
print(sample_var)
copd_query <- picsure::addClause(query = copd_query,
keys = sample_var,
type = "REQUIRE")
picsure::runQuery(copd_query, resultType = 'count')
copd_result <- picsure::runQuery(copd_query)
dim(copd_result)
head(copd_result)
mapping_df <- copd_result %>%
select(patient_id, "\\phs000951\\pht005051\\phv00253403\\SAMPLE_ID\\")
mapping_df
mapping_df <- copd_result %>%
select(patient_id, "\\phs000951\\pht005051\\phv00253403\\SAMPLE_ID\\") %>%
rename('sample_id': "\\phs000951\\pht005051\\phv00253403\\SAMPLE_ID\\")
mapping_df <- copd_result %>%
select(patient_id, "\\phs000951\\pht005051\\phv00253403\\SAMPLE_ID\\") %>%
rename(sample_id: "\\phs000951\\pht005051\\phv00253403\\SAMPLE_ID\\")
mapping_df <- copd_result %>%
select(patient_id, "\\phs000951\\pht005051\\phv00253403\\SAMPLE_ID\\") %>%
rename("\\phs000951\\pht005051\\phv00253403\\SAMPLE_ID\\": "sample_id")
mapping_df <- copd_result %>%
select(patient_id, "\\phs000951\\pht005051\\phv00253403\\SAMPLE_ID\\") %>%
rename(sample_id = "\\phs000951\\pht005051\\phv00253403\\SAMPLE_ID\\")
mapping_df
mapping_df <- copd_result %>%
select(patient_id, "\\phs000951\\pht005051\\phv00253403\\SAMPLE_ID\\") %>%
rename(sample_id = "\\phs000951\\pht005051\\phv00253403\\SAMPLE_ID\\") %>%
mutate(sample_id = sample_id.str_split("\t"))
mapping_df <- copd_result %>%
select(patient_id, "\\phs000951\\pht005051\\phv00253403\\SAMPLE_ID\\") %>%
rename(sample_id = "\\phs000951\\pht005051\\phv00253403\\SAMPLE_ID\\") %>%
mutate(sample_id = sample_id.strsplit("\t"))
mapping_df <- copd_result %>%
select(patient_id, "\\phs000951\\pht005051\\phv00253403\\SAMPLE_ID\\") %>%
rename(sample_id = "\\phs000951\\pht005051\\phv00253403\\SAMPLE_ID\\") %>%
mutate(sample_id = strsplit(sample_id, "\t"))
mapping_df
mapping_df <- copd_result %>%
select(patient_id, "\\phs000951\\pht005051\\phv00253403\\SAMPLE_ID\\") %>%
rename(sample_id = "\\phs000951\\pht005051\\phv00253403\\SAMPLE_ID\\") %>%
mutate(sample_id = strsplit(sample_id, "\t")) %>%
unnest(sample_id)
mapping_df
### Uncomment this code if you are not using the PIC-SURE environment in *BDC-Seven Bridges*, or if you do not have all the necessary dependencies installed.
install.packages("devtools")
install.packages("devtools")
Sys.setenv(TAR = "/bin/tar")
options(unzip = "internal")
devtools::install_github("hms-dbmi/pic-sure-r-adapter-hpds", ref="main", force=T, quiet=FALSE)
restart()
#Sys.setenv(TAR = "/bin/tar")
#options(unzip = "internal")
devtools::install_github("hms-dbmi/pic-sure-r-adapter-hpds", ref="main", force=T, quiet=FALSE)
#Sys.setenv(TAR = "/bin/tar")
#options(unzip = "internal")
devtools::install_github("hms-dbmi/pic-sure-r-adapter-hpds", ref="main", force=T, quiet=FALSE)
install.packages("devtools")
install.packages("devtools")
library(devtools)
#Sys.setenv(TAR = "/bin/tar")
#options(unzip = "internal")
devtools::install_github("hms-dbmi/pic-sure-r-adapter-hpds", ref="main", force=T, quiet=FALSE)
### Uncomment this code if you are not using the PIC-SURE environment in *BDC-Seven Bridges*, or if you do not have all the necessary dependencies installed.
install.packages(c("devtools", "dplyr", "ggplot2"))
install.packages(c("devtools", "dplyr", "ggplot2"))
Sys.setenv(TAR = "/bin/tar")
options(unzip = "internal")
devtools::install_github("hms-dbmi/pic-sure-r-adapter-hpds", ref="main", force=T, quiet=FALSE)
### Uncomment this code if you are not using the PIC-SURE environment in *BDC-Seven Bridges*, or if you do not have all the necessary dependencies installed.
install.packages(c("devtools", "dplyr", "ggplot2"))
install.packages(c("devtools", "dplyr", "ggplot2"))
#Sys.setenv(TAR = "/bin/tar")
#options(unzip = "internal")
devtools::install_github("hms-dbmi/pic-sure-r-adapter-hpds", ref="main", force=T, quiet=FALSE)
#Sys.setenv(TAR = "/bin/tar")
#options(unzip = "internal")
devtools::install_github("hms-dbmi/pic-sure-r-adapter-hpds", ref="main", force=T, quiet=FALSE)
# Read in BCH_Exercise_Nephrotic_Syndrome.csv and PCGC_Extracted_BCH_Labs.csv
bch_exercise <- read.csv("BCH_Exercise_Nephrotic_Syndrome.csv")
View(bch_exercise)
# Read in BCH_Exercise_Nephrotic_Syndrome.csv and PCGC_Extracted_BCH_Labs.csv
bch_exercise <- read.csv("BCH_Exercise_Nephrotic_Syndrome.csv")
pcgc_labs <- read.csv("PCGC_Extracted_BCH_Labs.csv")
View(pcgc_labs)
View(bch_exercise)
# Install packages
library(dplyr)
# Compare LOINC codes
needed_loincs <- bch_exercise %>% select(C_BASECODE)
View(needed_loincs)
# Install packages
library(dplyr)
library(stringr)
# Compare LOINC codes
needed_loincs <- bch_exercise %>% select(C_BASECODE)
needed_loincs <- str_replace(needed_loincs, "LOINC:", "")
needed_loincs
# Compare LOINC codes
needed_loincs <- str_replace(bch_exercise$C_BASECODE, "LOINC:", "")
needed_loincs
# Compare LOINC codes
needed_loincs <- str_replace(bch_exercise$C_BASECODE, "LOINC:", "")
pcgc_loincs <- pcgc_labs %>% select(c("LOINC.CODE", "BCH.INTERNAL.CODE"))
View(pcgc_loincs)
# Compare LOINC codes
needed_loincs <- as.data.frame(str_replace(bch_exercise$C_BASECODE, "LOINC:", ""))
pcgc_loincs <- pcgc_labs %>% select(c("LOINC.CODE", "BCH.INTERNAL.CODE"))
View(needed_loincs)
# Compare LOINC codes
needed_loincs <- as.data.frame(str_replace(bch_exercise$C_BASECODE, "LOINC:", ""), col.names = "LOINC.CODE")
pcgc_loincs <- pcgc_labs %>% select(c("LOINC.CODE", "BCH.INTERNAL.CODE"))
View(needed_loincs)
# Compare LOINC codes
needed_loincs <- as.data.frame(str_replace(bch_exercise$C_BASECODE, "LOINC:", ""), col.names = c("LOINC.CODE"))
pcgc_loincs <- pcgc_labs %>% select(c("LOINC.CODE", "BCH.INTERNAL.CODE"))
View(needed_loincs)
# Compare LOINC codes
needed_loincs <- str_replace(bch_exercise$C_BASECODE, "LOINC:", "")
pcgc_loincs <- pcgc_labs %>% select(c("LOINC.CODE", "BCH.INTERNAL.CODE"))
# Compare LOINC codes
needed_loincs <- as.data.frame(str_replace(bch_exercise$C_BASECODE, "LOINC:", ""))
colnames(needed_loincs) <- c("LOINC.CODE")
pcgc_loincs <- pcgc_labs %>% select(c("LOINC.CODE", "BCH.INTERNAL.CODE"))
# Compare LOINC codes
needed_loincs <- as.data.frame(str_replace(bch_exercise$C_BASECODE, "LOINC:", ""))
colnames(needed_loincs) <- c("LOINC.CODE")
pcgc_loincs <- pcgc_labs %>% select(c("LOINC.CODE", "BCH.INTERNAL.CODE"))
merged <- merge(needed_loincs, pcgc_loincs, by="LOINC.CODE")
View(merged)
# Compare LOINC codes
needed_loincs <- as.data.frame(str_replace(bch_exercise$C_BASECODE, "LOINC:", ""))
colnames(needed_loincs) <- c("BCH.LOINC.CODE")
pcgc_loincs <- pcgc_labs %>% select(c("LOINC.CODE", "BCH.INTERNAL.CODE"))
merged <- left_join(needed_loincs, pcgc_loincs, by.x="BCH.LOINC.CODE", by.y="LOINC.CODE")
# Compare LOINC codes
needed_loincs <- as.data.frame(str_replace(bch_exercise$C_BASECODE, "LOINC:", ""))
colnames(needed_loincs) <- c("BCH.LOINC.CODE")
pcgc_loincs <- pcgc_labs %>% select(c("LOINC.CODE", "BCH.INTERNAL.CODE"))
merged <- left_join(needed_loincs, pcgc_loincs, join_by("BCH.LOINC.CODE"=="LOINC.CODE"))
View(merged)
# Compare LOINC codes
needed_loincs <- as.data.frame(str_replace(bch_exercise$C_BASECODE, "LOINC:", ""))
colnames(needed_loincs) <- c("BCH.LOINC.CODE")
pcgc_loincs <- pcgc_labs %>% select(c("LOINC.CODE", "BCH.INTERNAL.CODE"))
merged <- left_join(needed_loincs, pcgc_loincs, join_by("BCH.LOINC.CODE"=="LOINC.CODE"))
length(merged$BCH.INTERNAL.CODE)
# Compare LOINC codes
needed_loincs <- as.data.frame(str_replace(bch_exercise$C_BASECODE, "LOINC:", ""))
colnames(needed_loincs) <- c("BCH.LOINC.CODE")
pcgc_loincs <- pcgc_labs %>% select(c("LOINC.CODE", "BCH.INTERNAL.CODE"))
merged <- left_join(needed_loincs, pcgc_loincs, join_by("BCH.LOINC.CODE"=="LOINC.CODE"))
length(!is.na(merged$BCH.INTERNAL.CODE))
# Compare LOINC codes
needed_loincs <- as.data.frame(str_replace(bch_exercise$C_BASECODE, "LOINC:", ""))
colnames(needed_loincs) <- c("BCH.LOINC.CODE")
pcgc_loincs <- pcgc_labs %>% select(c("LOINC.CODE", "BCH.INTERNAL.CODE"))
merged <- left_join(needed_loincs, pcgc_loincs, join_by("BCH.LOINC.CODE"=="LOINC.CODE"))
length(is.na(merged$BCH.INTERNAL.CODE))
# Compare LOINC codes
needed_loincs <- as.data.frame(str_replace(bch_exercise$C_BASECODE, "LOINC:", ""))
colnames(needed_loincs) <- c("BCH.LOINC.CODE")
pcgc_loincs <- pcgc_labs %>% select(c("LOINC.CODE", "BCH.INTERNAL.CODE"))
merged <- left_join(needed_loincs, pcgc_loincs, join_by("BCH.LOINC.CODE"=="LOINC.CODE"))
is.na(merged$BCH.INTERNAL.CODE)
# Compare LOINC codes
needed_loincs <- as.data.frame(str_replace(bch_exercise$C_BASECODE, "LOINC:", ""))
colnames(needed_loincs) <- c("BCH.LOINC.CODE")
pcgc_loincs <- pcgc_labs %>% select(c("LOINC.CODE", "BCH.INTERNAL.CODE"))
merged <- left_join(needed_loincs, pcgc_loincs, join_by("BCH.LOINC.CODE"=="LOINC.CODE"))
sum(!is.na(merged$BCH.INTERNAL.CODE))
# Read in snowflake mapped codes.
snowflake_codes <- read.csv("snowflake_mapped_labs.csv")
View(snowflake_codes)
snowflake_loincs <- snowflake_codes %>% select(c("LAB_LOINC_CODE", "LAB.LAB_INTERNAL_CODE"))
View(snowflake_loincs)
snowflake_loincs <- snowflake_codes %>% select(c("LAB_LOINC_CODE", "LAB.LAB_INTERNAL_CODE"))
merged <- left_join(merged, snowflake_loincs, join_by("BCH.LOINC.CODE"=="LAB_LOINC_CODE"))
# Read in mosaic mapping codes.
mosaic_codes <- read.csv("mosaic_mapping.csv")
View(mosaic_codes)
#Sys.setenv(TAR = "/bin/tar")
#options(unzip = "internal")
devtools::install_github("hms-dbmi/pic-sure-r-adapter-hpds", ref="main", force=T, quiet=FALSE)
### Uncomment this code if you are not using the PIC-SURE environment in *BDC-Seven Bridges*, or if you do not have all the necessary dependencies installed.
install.packages(c("devtools", "dplyr", "ggplot2"))
install.packages(c("devtools", "dplyr", "ggplot2"))
library(devtools)
#Sys.setenv(TAR = "/bin/tar")
#options(unzip = "internal")
devtools::install_github("hms-dbmi/pic-sure-r-adapter-hpds", ref="main", force=T, quiet=FALSE)
gitcreds::gitcreds_set()
#Sys.setenv(TAR = "/bin/tar")
#options(unzip = "internal")
devtools::install_github("hms-dbmi/pic-sure-r-adapter-hpds", ref="main", force=T, quiet=FALSE)
library(dplyr)
library(ggplot2)
library(picsure)
PICSURE_network_URL = "https://picsure.biodatacatalyst.nhlbi.nih.gov/picsure"
token_file <- "token.txt"
token <- scan(token_file, what = "character")
session <- picsure::bdc.initializeSession(PICSURE_network_URL, token)
session <- picsure::bdc.setResource(session = session,  resourceName = "AUTH")
harmonized_df <- picsure::bdc.searchPicsure(session, 'harmonized') %>% filter(study_id == 'DCC Harmonized data set')
sys.time()
Sys.time()
print(Sys.time()
)
